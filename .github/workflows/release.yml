name: 发布发行版

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 下载依赖
        run: go mod download

      - name: 🚀 运行 release-please 获取版本号
        id: release
        uses: googleapis/release-please-action@v4
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: 🔨 构建所有平台二进制
        if: ${{ steps.release.outputs.release_created }}
        env:
          VERSION: ${{ steps.release.outputs.tag_name }}
          COMMIT: ${{ github.sha }}
        run: |
          declare -a GOOS_ARRAY=("linux" "windows" "darwin" "freebsd" "dragonfly" "solaris" "aix" "plan9")
          declare -a GOARCH_ARRAY=("amd64" "arm64" "386" "ppc64" "riscv64")

          mkdir -p dist

          BUILT_AT=$(date -u +%Y-%m-%d_%H:%M:%S)

          for GOOS in "${GOOS_ARRAY[@]}"; do
            for GOARCH in "${GOARCH_ARRAY[@]}"; do
              case "${GOOS}/${GOARCH}" in
                "windows/amd64"|"windows/arm64"|"windows/386"|"linux/amd64"|"linux/arm64"|"linux/386"|"darwin/amd64"|"darwin/arm64"|"freebsd/amd64"|"freebsd/arm64"|"linux/riscv64"|"linux/ppc64"|"dragonfly/amd64"|"solaris/amd64"|"aix/ppc64"|"plan9/amd64"|"plan9/386")
                  ;;
                *)
                  echo "跳过不支持的组合: ${GOOS}/${GOARCH}"
                  continue
                  ;;
              esac

              BINARY_NAME="JJFreeBooks-${GOOS}-${GOARCH}"
              if [ "$GOOS" = "windows" ]; then
                BINARY_NAME="${BINARY_NAME}.exe"
              fi

              echo "📦 正在构建: ${GOOS}/${GOARCH} -> ${BINARY_NAME}"

              CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} go build \
                -ldflags="
                  -s -w \
                  -X main.version=${VERSION} \
                  -X main.commit=${COMMIT} \
                  -X main.date=${BUILT_AT}" \
                -o "dist/${BINARY_NAME}" \
                .

              if [ $? -ne 0 ]; then
                echo "❌ 构建失败: ${GOOS}/${GOARCH}"
                exit 1
              fi
            done
          done

          echo "✅ 构建完成，产物列表："
          ls -la dist/

      - name: 📦 上传构建产物到 Actions 临时存储
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/*
          retention-days: 7

      - name: 🗃 上传构建产物到 GitHub Release
        if: ${{ steps.release.outputs.release_created }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release.outputs.tag_name }}
          name: ${{ steps.release.outputs.tag_name }}
          body: ${{ steps.release.outputs.release_notes }}
          files: dist/*